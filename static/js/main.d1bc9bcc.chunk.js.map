{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","message","Navbar","mode","href","title","id","style","color","about","dark","onClick","toggleMode","htmlFor","default","TextForm","useEffect","document","useState","text","SetText","heading","rows","value","onChange","event","target","placeholder","backgroundColor","boxShadow","borderColor","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","class","newText","toUpperCase","toLowerCase","navigator","clipboard","writeText","split","length","App","setmode","setalert","showalert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d1bc9bcc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Alert = (props) => {\r\n  return (\r\n    props.alert && (\r\n      <>\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{props.alert.message}</strong>\r\n        </div>\r\n      </>\r\n    )\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nexport const Navbar = (props) => {\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        {/* <nav\r\n        className=\"navbar navbar-expand-lg navbar-light\"\r\n        style={{\r\n          backgroundColor: props.dark === \"black\" ? \"black\" : \"#F8F9FA\",\r\n          color: \"green\",\r\n        }}\r\n      > */}\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNav\"\r\n          aria-controls=\"navbarNav\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\" style={{ color: \"red\" }}>\r\n            <li className=\"nav-item\">\r\n              <a href=\"#\" className=\"nav-link\">\r\n                Home<span className=\"sr-only\">(current)</span>\r\n              </a>\r\n              {/* <a className=\"nav-link\" href=\"#\">\r\n                Home <span className=\"sr-only\">(current)</span>\r\n              </a> */}\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">\r\n                {props.about}\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/pricing\">\r\n                Pricing\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div\r\n          className={`custom-control custom-switch text-${\r\n            props.dark === \"light\" ? \"dark\" : \"white\"\r\n          }`}\r\n        >\r\n          {/* <div className=\"\">\r\n            <button\r\n              id=\"\"\r\n              className=\"color mx-1 btn\"\r\n              style={{ backgroundColor: \"#A1D01D\" }}\r\n            ></button>\r\n\r\n            <button\r\n              id=\"\"\r\n              className=\"color mx-1 btn\"\r\n              style={{ backgroundColor: \"#F29B00\" }}\r\n            ></button>\r\n\r\n            <button\r\n              id=\"\"\r\n              className=\"color mx-1 btn\"\r\n              style={{ backgroundColor: \"#82C4E4\" }}\r\n            ></button>\r\n\r\n            <button\r\n              onClick={props.dark}\r\n              className=\"color mx-1 btn\"\r\n              style={{ backgroundColor: \"grey\" }}\r\n            ></button>\r\n          </div> */}\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"custom-control-input\"\r\n            id=\"customSwitch1\"\r\n            onClick={props.toggleMode}\r\n          />\r\n\r\n          <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">\r\n            Enable {props.mode == \"light\" ? \"Dark\" : \"Light\"} Mode\r\n          </label>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.default = {\r\n  title: \"Title Text Here\",\r\n  about: \"About Text Here\",\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport const TextForm = (props) => {\r\n  useEffect(() => {\r\n    document.title = \"TextUtils - Home\";\r\n  }, []);\r\n\r\n  const textOnChange = (event) => {\r\n    SetText(event.target.value);\r\n  };\r\n\r\n  const textUpperCase = () => {\r\n    let newText = text.toUpperCase();\r\n    SetText(newText);\r\n    props.alert(\"Text Converted to Uppercase\", \"success\");\r\n  };\r\n\r\n  const textLowerCase = () => {\r\n    let newText = text.toLowerCase();\r\n    SetText(newText);\r\n    props.alert(\"Text Converted to Lowercase\", \"success\");\r\n  };\r\n\r\n  const speak = () => {\r\n    let msg = new SpeechSynthesisUtterance();\r\n    msg.text = text;\r\n    window.speechSynthesis.speak(msg);\r\n  };\r\n\r\n  const copyText = () => {\r\n    navigator.clipboard.writeText(text);\r\n    props.alert(\"Text Copied Successfully\", \"success\");\r\n  };\r\n\r\n  const [text, SetText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div\r\n        className={`container text-${\r\n          props.mode === \"light\" ? \"grey\" : \"white\"\r\n        }`}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"textform\"\r\n          rows=\"8\"\r\n          value={text}\r\n          onChange={textOnChange}\r\n          placeholder=\"Start Typing....\"\r\n          style={{\r\n            backgroundColor: props.mode === \"light\" ? \"white\" : \"#343A40\",\r\n            color: props.mode === \"light\" ? \"black\" : \"white\",\r\n            boxShadow: \"none\",\r\n            borderColor: props.mode === \"light\" ? \"grey\" : \"#343A40\",\r\n          }}\r\n        ></textarea>\r\n\r\n        <button className=\"btn btn-warning btn-sm mt-3 mr-2\" onClick={speak}>\r\n          <i class=\"fa-duotone fa-volume\"></i>\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-danger btn-sm mt-3 mr-2\"\r\n          onClick={textUpperCase}\r\n        >\r\n          Convert to Upper Case\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-success btn-sm mt-3 mr-2\"\r\n          onClick={textLowerCase}\r\n        >\r\n          Convert to Lower Case\r\n        </button>\r\n\r\n        <button className=\"btn btn-primary btn-sm mt-3 mr-2\" onClick={copyText}>\r\n          Copy Text\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className={`container my-3 text-${\r\n          props.mode === \"light\" ? \"grey\" : \"white\"\r\n        }`}\r\n      >\r\n        <h1>Text summary</h1>\r\n        <p>\r\n          {text.split(\" \").length} words & {text.length} characters <br />\r\n          {0.008 * text.split(\" \").length} Minutes to read the text\r\n        </p>\r\n\r\n        <h2>Preview</h2>\r\n        <p> {text.length > 0 ? text : \"Enter text to preview here\"} </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport { About } from \"./Components/About\";\nimport { Alert } from \"./Components/Alert\";\nimport { Navbar } from \"./Components/Navbar\";\nimport { TextForm } from \"./Components/TextForm\";\n\n// import { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n\n  // Setting the color themes\n  const [dark, setdark] = useState(\"white\");\n\n  const showalert = (message, type) => {\n    setalert({\n      message: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showalert(\"Light Mode has been enabled\", \"success\");\n    } else {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showalert(\"Dark Mode has been enabled\", \"success\");\n    }\n  };\n\n  const darkMode = () => {\n    if (dark === \"white\") {\n      setdark(\"black\");\n      document.body.style.backgroundColor = \"grey\";\n    } else {\n      setdark(\"white\");\n      document.body.style.backgroundColor = \"white\";\n    }\n  };\n  return (\n    <>\n      <Navbar\n        title=\"TextUtils\"\n        about=\"About Us\"\n        mode={mode}\n        toggleMode={toggleMode}\n        dark={mode}\n      />\n\n      <Alert alert={alert}></Alert>\n\n      {/* <TextForm\n        heading=\"Enter Your Text Here to Analyze\"\n        className=\"mb-3\"\n        mode={mode}\n        alert={showalert}\n      /> */}\n\n      {/* <Routes>\n          <Route\n            exact\n            path=\"/\"\n            element={\n              <TextForm\n                heading=\"Enter Your Text Here to Analyze\"\n                className=\"mb-3\"\n                mode={mode}\n                alert={showalert}\n              />\n            }\n          />\n\n          <Route exact path=\"/about\" element={<About />} />\n        </Routes> */}\n\n      <TextForm\n        heading=\"Enter Your Text Here to Analyze\"\n        className=\"mb-3\"\n        mode={mode}\n        alert={showalert}\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}